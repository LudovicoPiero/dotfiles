{
  lib,
  pkgs,
  config,
  ...
}:
let
  inherit (lib) mkOption mkEnableOption mkIf;
  inherit (lib.types) int;
  inherit (lib.generators) toLua;

  qr = "${toString cfg.quantum}/${toString cfg.rate}";

  cfg = config.myOptions.pipewire;
in
{
  options.myOptions.pipewire = {
    enable = mkEnableOption "pipewire";

    quantum = mkOption {
      description = "Minimum quantum to set";
      type = int;
      default = 64;
      example = 32;
    };

    rate = mkOption {
      description = "Rate to set";
      type = int;
      default = 48000;
      example = 96000;
    };
  };

  config = mkIf cfg.enable {
    security.rtkit.enable = true;
    services = {
      # Enable sound.
      pipewire = {
        enable = true;
        pulse.enable = true;
        wireplumber = {
          enable = true;
          configPackages =
            let
              # generate "matches" section of the rules
              matches =
                toLua
                  {
                    multiline = false; # looks better while inline
                    indent = false;
                  }
                  [
                    [
                      [
                        "node.name"
                        "matches"
                        "alsa_output.*"
                      ]
                    ]
                  ]; # nested lists are to produce `{{{ }}}` in the output

              # generate "apply_properties" section of the rules
              apply_properties = toLua { } {
                "audio.format" = "S32LE";
                "audio.rate" = cfg.rate * 2;
                "api.alsa.period-size" = 2;
              };
            in
            [
              (pkgs.writeTextDir "share/lowlatency.lua.d/99-alsa-lowlatency.lua" ''
                -- Generated by nix-gaming
                alsa_monitor.rules = {
                  {
                    matches = ${matches};
                    apply_properties = ${apply_properties};
                  }
                }
              '')
            ];
        };

        extraConfig = {
          pipewire = {
            # stolen from fufexan/nix-gaming
            "99-lowlatency" = {
              context = {
                properties = {
                  "default.clock.rate" = cfg.rate;
                  "default.clock.min-quantum" = cfg.quantum;
                  "default.clock.allowed-rates" = [
                    44100
                    48000
                    88200
                    96000
                  ];
                };
                modules = [
                  {
                    name = "libpipewire-module-rtkit";
                    flags = [
                      "ifexists"
                      "nofail"
                    ];
                    args = {
                      nice.level = -15;
                      rt = {
                        prio = 88;
                        time.soft = 200000;
                        time.hard = 200000;
                      };
                    };
                  }
                  {
                    name = "libpipewire-module-protocol-pulse";
                    args = {
                      server.address = [ "unix:native" ];
                      pulse.min = {
                        req = qr;
                        quantum = qr;
                        frag = qr;
                      };
                    };
                  }
                ];

                stream.properties = {
                  node.latency = qr;
                  resample.quality = 1;
                };
              };
            };
          };

          pipewire-pulse = {
            "10-switch-on-connect" = {
              "pulse.cmd" = [
                {
                  cmd = "load-module";
                  args = "module-switch-on-connect";
                }
              ];
            };
          };
        };
      };
    };
  };
}
